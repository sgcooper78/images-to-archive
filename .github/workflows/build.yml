name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    name: Build for ${{ matrix.goos }} (${{ matrix.goarch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
          - os: ubuntu-22.04-arm64
            arch: arm64
            goos: linux
            goarch: arm64
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
          - os: windows-latest
            arch: arm64
            goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.2'

    - name: Install dependencies (Linux)
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebp-dev pkg-config

    - name: Install dependencies (Windows)
      if: matrix.goos == 'windows'
      run: |
        # Install WebP library for Windows
        choco install webp -y

    - name: Build binary
      env:
        CGO_ENABLED: 1
      run: |
        go build -ldflags="-s -w" -o "cbz-converter-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}" main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cbz-converter-${{ matrix.goos }}-${{ matrix.goarch }}
        path: cbz-converter-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        # Copy all binaries to release directory
        find ./artifacts -name "cbz-converter-*" -type f -exec cp {} ./release/ \;
        
        # Create checksums
        cd release
        sha256sum * > checksums.txt
        
        # List files for verification
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*
        body: |
          ## CBZ WebP Converter Release
          
          This release contains pre-built binaries for Linux and Windows platforms.
          
          ### Downloads
          - **Linux (amd64)**: `cbz-converter-linux-amd64`
          - **Linux (arm64)**: `cbz-converter-linux-arm64`
          - **Windows (amd64)**: `cbz-converter-windows-amd64.exe`
          - **Windows (arm64)**: `cbz-converter-windows-arm64.exe`
          
          ### Usage
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux): `chmod +x cbz-converter-linux-amd64`
          3. Run the application: `./cbz-converter-linux-amd64` or `cbz-converter-windows-amd64.exe`
          
          ### Features
          - Interactive TUI interface
          - CBZ to WebP conversion
          - Cross-platform support
          
          ### Verification
          Verify file integrity using the provided checksums:
          ```bash
          sha256sum -c checksums.txt
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
